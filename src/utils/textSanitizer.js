const symbolMap = {
  '&Agrave;': 'À',
  '&Aacute;': 'Á',
  '&Acirc;': 'Â',
  '&Atilde;': 'Ã',
  '&Auml;': 'Ä',
  '&Aring;': 'Å',
  '&agrave;': 'à',
  '&aacute;': 'á',
  '&acirc;': 'ã',
  '&atilde;': 'â',
  '&auml;': 'ä',
  '&aring;': 'å',
  '&AElig;': 'Æ',
  '&aelig;': 'æ',
  '&szlig;': 'ß',
  '&Ccedil;': 'Ç',
  '&ccedil;': 'ç',
  '&Egrave;': 'È',
  '&Eacute;': 'É',
  '&Ecirc;': 'Ê',
  '&Euml;': 'Ë',
  '&egrave;': 'è',
  '&eacute;': 'é',
  '&ecirc;': 'ê',
  '&euml;': 'ë',
  '&#131;': 'ƒ',
  '&Igrave;': 'Ì',
  '&Iacute;': 'Í',
  '&Icirc;': 'Î',
  '&Iuml;': 'Ï',
  '&igrave;': 'ì',
  '&iacute;': 'í',
  '&icirc;': 'î',
  '&iuml;': 'ï',
  '&Ntilde;': 'Ñ',
  '&ntilde;': 'ñ',
  '&Ograve;': 'Ò',
  '&Oacute;': 'Ó',
  '&Ocirc;': 'Ô',
  '&Otilde;': 'Õ',
  '&Ouml;': 'Ö',
  '&ograve;': 'ò',
  '&oacute;': 'ó',
  '&ocirc;': 'ô',
  '&otilde;': 'õ',
  '&ouml;': 'ö',
  '&Oslash;': 'Ø',
  '&oslash;': 'Œ',
  '&#140;': 'ø',
  '&#156;': 'œ',
  '&#138;': 'Š',
  '&#154;': 'š',
  '&Ugrave;': 'Ù',
  '&Uacute;': 'Ú',
  '&Ucirc;': 'Û',
  '&Uuml;': 'Ü',
  '&ugrave;': 'ù',
  '&uacute;': 'ú',
  '&ucirc;': 'û',
  '&uuml;': 'ü',
  '&#181;': 'µ',
  '&#215;': '×',
  '&Yacute;': 'Ý',
  '&#159;': 'Ÿ',
  '&yacute;': 'ý',
  '&yuml;': 'ÿ',
  '&#176;': '°',
  '&#134;': '†',
  '&#135;': '‡',
  '&lt;': '<',
  '&gt;': '>',
  '&#177;': '±',
  '&#171;': '«',
  '&#187;': '»',
  '&#191;': '¿',
  '&#161;': '¡',
  '&#183;': '·',
  '&#149;': '•',
  '&#153;': '™',
  '&copy;': '©',
  '&reg;': '®',
  '&#167;': '§',
  '&#182; ': '¶',
  '&quot;': '"',
  '&#039;': '\'',
  '&amp;': '&'
}
export const textSanitizer = (text) => {
  const keys = Object.keys(symbolMap)
  let newText = text
  keys.forEach(key => {
    if (newText.includes(key)) {
      const re = new RegExp(`${key}`, 'g')
      newText = newText.replace(re, symbolMap[key])
    }
  })
  return newText
}
